/*
 * Copyright 2017-2021 original authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.micronaut.aot.core.sourcegen

import com.squareup.javapoet.JavaFile
import com.squareup.javapoet.MethodSpec
import com.squareup.javapoet.TypeSpec
import io.micronaut.aot.core.AOTSourceGenerator
import io.micronaut.context.ApplicationContextConfigurer
import io.micronaut.core.annotation.NonNull
import org.jetbrains.annotations.NotNull

class ApplicationContextConfigurerGeneratorTest extends AbstractSourceGeneratorSpec {
    private List<AOTSourceGenerator> generators = []

    @Override
    AOTSourceGenerator newGenerator() {
        new ApplicationContextConfigurerGenerator(generators)
    }

    def "generates an application context builder service"() {
        when:
        generate()

        then:
        assertThatGeneratedSources {
            doesNotCreateInitializer()
            hasClass('AOTApplicationContextConfigurer') {
                withSources '''package io.micronaut.test;

import io.micronaut.context.ApplicationContextConfigurer;

public class AOTApplicationContextConfigurer implements ApplicationContextConfigurer {
  static {
  }
}'''
            }
            generatesServiceFile(ApplicationContextConfigurer, "io.micronaut.test.AOTApplicationContextConfigurer")
        }
    }

    def "delegate source generators are used in static initializer"() {
        generators << new GeneratorWithStaticInit("initializer1")
        generators << new GeneratorWithStaticInit("initializer2")

        when:
        generate()

        then:
        assertThatGeneratedSources {
            doesNotCreateInitializer()
            hasClass('AOTApplicationContextConfigurer') {
                withSources '''package io.micronaut.test;

import io.micronaut.context.ApplicationContextConfigurer;

public class AOTApplicationContextConfigurer implements ApplicationContextConfigurer {
  static {
    initializer1();
    initializer2();
  }

  private static void initializer1() {
  }

  private static void initializer2() {
  }
}
'''
                generatesServiceFile(ApplicationContextConfigurer, "io.micronaut.test.AOTApplicationContextConfigurer")
            }
        }
    }

    def "sources generated by delegates are generated"() {
        generators << new ClassGenerating()

        when:
        generate()

        then:
        assertThatGeneratedSources {
            doesNotCreateInitializer()
            hasClass("SomeClass") {
                withSources """package io.micronaut.test;

class SomeClass {
}
"""
            }
            hasClass('AOTApplicationContextConfigurer') {
                containingSources('class AOTApplicationContextConfigurer')
            }
        }
    }

    private static class GeneratorWithStaticInit extends AbstractSourceGenerator {
        private final String name

        protected GeneratorWithStaticInit(String name) {
            this.name = name
        }

        @NotNull
        @Override
        String getId() {
            "static-init"
        }

        @NonNull
        @NotNull
        @Override
        Optional<MethodSpec> generateStaticInit() {
            staticMethod(name) {

            }
        }
    }

    private class ClassGenerating extends AbstractSingleClassFileGenerator {
        @Override
        protected JavaFile generate() {
            JavaFile.builder(packageName, TypeSpec.classBuilder("SomeClass").build())
                    .build()
        }

        @NotNull
        @Override
        @NonNull
        String getId() {
            "class-generating"
        }
    }
}
